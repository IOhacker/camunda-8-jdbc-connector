{
  "$schema": "https://unpkg.com/@camunda/zeebe-element-templates-json-schema/resources/schema.json",
  "name": "JDBC Connector",
  "id": "io.camunda.connector.JDBC",
  "version": 840,
  "description": "Run JDBC statements",
  "documentationRef": "https://github.com/camunda/connectors",
  "icon": {
    "contents": "data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 26.2.1, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3Csvg version='1.1' id='uuid-29bf2835-028c-4a53-a2c7-a2d36262388a' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 512 512' style='enable-background:new 0 0 512 512;' xml:space='preserve'%3E%3Cstyle type='text/css'%3E .st0%7Bfill:%23FC5D0D;%7D%0A%3C/style%3E%3Cg%3E%3Cpath class='st0' d='M270.7,278.4c-4.9,0.2-9.8,0.2-14.7,0.2s-9.8-0.1-14.8-0.2c-41.5-1.1-74.5-7-98.3-15.3 c-9.9-3.1-19.4-7.6-28.1-13.3v53.1c16.1,16.8,70,32.3,141.2,32.3s125.1-15.5,141.2-32.3v-53.1c-8.8,5.7-18.4,10.2-28.4,13.4 C345,271.5,312.1,277.3,270.7,278.4L270.7,278.4z'/%3E%3Cpath class='st0' d='M114.8,175.7v53.1c14.9,15.5,62.3,30,125.9,32h2c1.9,0,3.7,0.1,5.6,0.1h15.6c1.9,0,3.7-0.1,5.6-0.1h2 c63.6-2,111-16.5,125.9-32v-53.1c-27.5,18.9-85.6,28.9-141.2,28.9S142.3,194.6,114.8,175.7L114.8,175.7z'/%3E%3Cpath class='st0' d='M396.4,139.9c-6.3-24.3-55.1-48.2-140.4-48.2c-85.2,0-133.8,23.8-140.4,48.1c-0.5,0.8-0.8,1.8-0.8,2.8v13.1 c16,16.7,69.6,32.2,141.2,32.2s125.2-15.4,141.2-32.2v-13C397.2,141.6,396.9,140.7,396.4,139.9L396.4,139.9z'/%3E%3Cpath class='st0' d='M114.8,323.2v46.3c0,0.9,0.2,1.8,0.7,2.5c6.7,27.7,66.3,48.3,140.5,48.3s133.6-20.5,140.5-48.1 c0.5-0.8,0.7-1.8,0.7-2.7v-46.3c-23.3,16.4-71.5,29.4-141.2,29.4S138.2,339.6,114.8,323.2L114.8,323.2z'/%3E%3C/g%3E%3C/svg%3E"
  },
  "category": {
    "id": "connectors",
    "name": "Connectors"
  },
  "appliesTo": [
    "bpmn:Task"
  ],
  "elementType": {
    "value": "bpmn:ServiceTask"
  },
  "groups": [
    {
      "id": "jdbc",
      "label": "JDBC"
    },
    {
      "id": "authentication",
      "label": "Authentication"
    },
    {
      "id": "command",
      "label": "SQL Command"
    },
    {
      "id": "output",
      "label": "Output Mapping"
    },
    {
      "id": "errors",
      "label": "Error Handling"
    }
  ],
  "properties": [
    {
      "type": "Hidden",
      "value": "io.camunda:connector-jdbc:1",
      "binding": {
        "type": "zeebe:taskDefinition:type"
      }
    },
    {
      "label": "JDBC Url",
      "id": "jdbcUrl",
      "group": "jdbc",
      "description": "Enter a valid JDBC Url. Remember that the JDBC Connector's JVM Process must be able to communicate via this JDBC URL",
      "type":"String",
      "value": "",
      "feel": "optional",
      "binding": {
        "type": "zeebe:input",
        "name": "jdbc.jdbcUrl"
      },
      "constraints": {
        "notEmpty": true
      }
    },
    {
      "label": "Username",
      "description": "Username to use to connect to the database",
      "group": "authentication",
      "type": "String",
      "value": "",
      "feel": "optional",
      "binding": {
        "type": "zeebe:input",
        "name": "jdbc.userName"
      }
    },
    {
      "label": "Password",
      "description": "Password to use to connect to the database",
      "group": "authentication",
      "type": "String",
      "value": "",
      "feel": "optional",
      "binding": {
        "type": "zeebe:input",
        "name": "jdbc.password"
      }
    },
    {
      "label": "Command Type",
      "id": "commandType",
      "group": "command",
      "description": "Choose which type of sql command to send",
      "value": "selectList",
      "type": "Dropdown",
      "choices": [
        {
          "name": "SELECT and return a single record",
          "value": "selectOne"
        },
        {
          "name": "SELECT and return a List of records",
          "value": "selectList"
        },
        {
          "name": "SELECT and return a List of records as a Map",
          "value": "selectMap"
        },
        {
          "name": "INSERT",
          "value": "insert"
        },
        {
          "name": "UPDATE",
          "value": "update"
        },
        {
          "name": "DELETE",
          "value": "delete"
        }
      ],
      "binding": {
        "type": "zeebe:input",
        "name": "command.commandType"
      }
    },
    {
      "label": "SELECT Statement",
      "description": "Enter the SELECT sql statement to run. The first record will be returned as a Map Data Structure",
      "group": "command",
      "type": "Text",
      "value": "",
      "feel": "optional",
      "binding": {
        "type": "zeebe:input",
        "name": "command.sql"
      },
      "condition": {
        "property": "commandType",
        "equals": "selectOne"
      },
      "constraints": {
        "notEmpty": true
      }
    },
    {
      "label": "SELECT Statement",
      "description": "Enter the SELECT sql statement to run. Results will be returned as a list. Each List item will be a Map Data Structure",
      "group": "command",
      "type": "Text",
      "value": "",
      "feel": "optional",
      "binding": {
        "type": "zeebe:input",
        "name": "command.sql"
      },
      "condition": {
        "property": "commandType",
        "equals": "selectList"
      },
      "constraints": {
        "notEmpty": true
      }
    },
    {
      "label": "SELECT Statement",
      "description": "Enter the SELECT sql statement to run. Results will be returned as a Map. The keys of the Result Map will be determined using the Map Key Column Name specified below. The values of the Map will be Lists of records that correspond to the Map Key.",
      "group": "command",
      "type": "Text",
      "value": "",
      "feel": "optional",
      "binding": {
        "type": "zeebe:input",
        "name": "command.sql"
      },
      "condition": {
        "property": "commandType",
        "equals": "selectMap"
      },
      "constraints": {
        "notEmpty": true
      }
    },
    {
      "label": "Map Key Column Name",
      "description": "Enter the name of the column to be used to index the results as a Map. For example, if the query results contain an `EMAIL` column, then entering `EMAIL` here will index results using email addresses as the Keys of the Result Map.",
      "group": "command",
      "type": "Text",
      "value": "",
      "feel": "optional",
      "binding": {
        "type": "zeebe:input",
        "name": "command.mapKey"
      },
      "condition": {
        "property": "commandType",
        "equals": "selectMap"
      },
      "constraints": {
        "notEmpty": true
      }
    },
    {
      "label": "INSERT Statement",
      "description": "Enter the INSERT sql statement to run. The number of records inserted will be returned",
      "group": "command",
      "type": "Text",
      "value": "",
      "feel": "optional",
      "binding": {
        "type": "zeebe:input",
        "name": "command.sql"
      },
      "condition": {
        "property": "commandType",
        "equals": "insert"
      },
      "constraints": {
        "notEmpty": true
      }
    },
    {
      "label": "UPDATE Statement",
      "description": "Enter the UPDATE sql statement to run. The number of records updated will be returned",
      "group": "command",
      "type": "Text",
      "value": "",
      "feel": "optional",
      "binding": {
        "type": "zeebe:input",
        "name": "command.sql"
      },
      "condition": {
        "property": "commandType",
        "equals": "update"
      },
      "constraints": {
        "notEmpty": true
      }
    },
    {
      "label": "DELETE Statement",
      "description": "Enter the DELETE sql statement to run. The number of records deleted will be returned",
      "group": "command",
      "type": "Text",
      "value": "",
      "feel": "optional",
      "binding": {
        "type": "zeebe:input",
        "name": "command.sql"
      },
      "condition": {
        "property": "commandType",
        "equals": "delete"
      },
      "constraints": {
        "notEmpty": true
      }
    },
    {
      "label": "Placeholder Parameter Map",
      "description": "A map of parameter values to replace `?` placeholders in the sql statement. For example, the following sql statement has one `?` parameter: `SELECT * from USERS where email = ?`. The parameter map could look like this: `{\"1\" : \"name@email.com\"}`",
      "group": "command",
      "type": "Text",
      "value": "",
      "feel": "optional",
      "binding": {
        "type": "zeebe:input",
        "name": "command.params"
      }
    },
    {
      "label": "Result Variable",
      "description": "Name of variable to store the response in",
      "group": "output",
      "type": "String",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "resultVariable"
      }
    },
    {
      "label": "Result Expression",
      "description": "Expression to map the response into process variables",
      "group": "output",
      "type": "Text",
      "feel": "required",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "resultExpression"
      }
    },
    {
      "label": "Error Expression",
      "description": "Expression to handle errors. Details in the <a href=\"https://docs.camunda.io/docs/components/connectors/use-connectors/\" target=\"_blank\">documentation</a>.",
      "group": "errors",
      "type": "Text",
      "feel": "required",
      "binding": {
        "type": "zeebe:taskHeader",
        "key": "errorExpression"
      }
    }
  ]
}
